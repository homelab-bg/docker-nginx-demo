name: Deploy Demo Nginx App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod-blue
        - prod-green

env:
  DEPLOY_TIME: ${{ github.event.head_commit.timestamp || github.run_id }}
  GIT_COMMIT: ${{ github.sha }}

jobs:
  deploy:
    runs-on: [self-hosted, local, docker]
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'dev' || 'prod-blue') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Display deployment info
      run: |
        echo "Deploying to environment: ${{ matrix.environment }}"
        echo "Git commit: ${{ env.GIT_COMMIT }}"
        echo "Deploy time: ${{ env.DEPLOY_TIME }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Runner hostname: $(hostname)"
        
    - name: Cleanup existing deployment
      run: |
        echo "Cleaning up existing containers for ${{ matrix.environment }}..."
        docker compose -p demo-${{ matrix.environment }} down --remove-orphans || true
        docker system prune -f || true
        
    - name: Build and deploy
      run: |
        echo "Building and deploying to ${{ matrix.environment }}..."
        
        # Set environment variables for docker compose
        export ENVIRONMENT=${{ matrix.environment }}
        export DEPLOY_TIME="${{ env.DEPLOY_TIME }}"
        export GIT_COMMIT="${{ env.GIT_COMMIT }}"
        export APP_VERSION="${{ github.ref_name }}-${{ github.run_number }}"
        
        # Check if env file exists
        if [ ! -f ".env.${{ matrix.environment }}" ]; then
          echo "Environment file .env.${{ matrix.environment }} not found, using defaults"
          cp .env.example .env.${{ matrix.environment }}
        else
          echo "Using environment file: .env.${{ matrix.environment }}"
          echo "Environment file contents:"
          cat .env.${{ matrix.environment }}
        fi
        
        # Determine compose files to use
        COMPOSE_FILES="-f docker-compose.yml"
        if [ -f "docker-compose.${{ matrix.environment }}.yml" ]; then
          COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.${{ matrix.environment }}.yml"
          echo "Using override file: docker-compose.${{ matrix.environment }}.yml"
        fi
        
        # Deploy with compose using the same method that works manually
        docker compose --env-file .env.${{ matrix.environment }} $COMPOSE_FILES -p demo-${{ matrix.environment }} up -d --build
        
    - name: Wait for container startup
      run: |
        echo "Waiting for container to fully initialize..."
        
        # Wait for container to be in "running" state
        for i in {1..30}; do
          if docker compose -p demo-${{ matrix.environment }} ps demo-nginx | grep -q "Up.*second"; then
            echo "Container is running (attempt $i)"
            break
          fi
          echo "Waiting for container to start... (attempt $i/30)"
          sleep 2
        done
        
        # Additional wait for nginx to fully initialize
        echo "Giving nginx additional time to initialize..."
        sleep 10
        
    - name: Get deployment port
      id: get_port
      run: |
        # Get the port from environment file
        NGINX_PORT=8080  # Default port
        if [ -f ".env.${{ matrix.environment }}" ]; then
          ENV_PORT=$(grep "^NGINX_PORT=" .env.${{ matrix.environment }} | cut -d'=' -f2 | tr -d ' "'"'" || echo "")
          if [ -n "$ENV_PORT" ]; then
            NGINX_PORT=$ENV_PORT
          fi
        fi
        
        echo "Detected port: $NGINX_PORT"
        echo "nginx_port=$NGINX_PORT" >> $GITHUB_OUTPUT
        
    - name: Check container status and logs
      run: |
        echo "=== Container Status ==="
        docker compose -p demo-${{ matrix.environment }} ps
        
        echo "=== Recent Container Logs ==="
        docker compose -p demo-${{ matrix.environment }} logs --tail=20 demo-nginx
        
        echo "=== Port Mapping Check ==="
        docker port $(docker compose -p demo-${{ matrix.environment }} ps -q demo-nginx) || echo "No port mapping found"
        
    - name: Test internal connectivity
      run: |
        echo "=== Internal Connectivity Tests ==="
        
        # Test with curl (more verbose)
        echo "Testing with curl..."
        docker compose -p demo-${{ matrix.environment }} exec -T demo-nginx curl -v http://localhost/health || echo "Curl test failed"
        
    - name: Test external connectivity
      run: |
        echo "=== External Connectivity Tests ==="
        
        NGINX_PORT=${{ steps.get_port.outputs.nginx_port }}
        echo "Using port: $NGINX_PORT"
        
        # Check if port is bound on host
        echo "=== Host Port Check ==="
        netstat -tlnp | grep :$NGINX_PORT || echo "Port $NGINX_PORT not bound on host"
        
        # Get container IP
        CONTAINER_IP=$(docker inspect $(docker compose -p demo-${{ matrix.environment }} ps -q demo-nginx) --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
        echo "Container IP: $CONTAINER_IP"
        
        # Test via container IP
        if [ -n "$CONTAINER_IP" ]; then
          echo "Testing via container IP..."
          curl -v -m 10 http://$CONTAINER_IP/health || echo "Container IP test failed"
        fi
        
        # Test via host network
        echo "Testing via host network..."
        curl -v -m 10 http://127.0.0.1:$NGINX_PORT/health || echo "Host network test failed"
        
    - name: Final verification
      run: |
        echo "=== Final Verification ==="
        
        NGINX_PORT=${{ steps.get_port.outputs.nginx_port }}
        echo "Final verification using port: $NGINX_PORT"
        
        # Try internal test first
        if docker compose -p demo-${{ matrix.environment }} exec -T demo-nginx curl -f -m 5 http://localhost/health >/dev/null 2>&1; then
          echo "‚úÖ Internal health check successful"
          INTERNAL_SUCCESS=true
        else
          echo "‚ùå Internal health check failed"
          INTERNAL_SUCCESS=false
        fi
        
        # Try external test
        if curl -f -m 5 http://127.0.0.1:$NGINX_PORT/health >/dev/null 2>&1; then
          echo "‚úÖ External health check successful"
          EXTERNAL_SUCCESS=true
        else
          echo "‚ùå External health check failed"
          EXTERNAL_SUCCESS=false
        fi
        
        # At least one must succeed
        if [ "$INTERNAL_SUCCESS" = "true" ] || [ "$EXTERNAL_SUCCESS" = "true" ]; then
          echo "‚úÖ Deployment verification successful!"
          echo "üåê Application available at: http://$(hostname):$NGINX_PORT"
          
          # Test info endpoint too
          if curl -f -m 5 http://127.0.0.1:$NGINX_PORT/info >/dev/null 2>&1; then
            echo "‚úÖ Info endpoint also working"
          fi
        else
          echo "‚ùå Both internal and external tests failed"
          echo "=== Final Debug Dump ==="
          docker compose -p demo-${{ matrix.environment }} logs demo-nginx
          exit 1
        fi
        
    - name: Deployment summary
      if: always()
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Environment: ${{ matrix.environment }}"
        echo "Status: ${{ job.status }}"
        echo "Commit: ${{ env.GIT_COMMIT }}"
        echo "Time: ${{ env.DEPLOY_TIME }}"
        echo "Runner: $(hostname)"
        
        if [ "${{ job.status }}" = "success" ]; then
          NGINX_PORT=${{ steps.get_port.outputs.nginx_port }}
          echo "üåê Access your app: http://$(hostname):$NGINX_PORT"
          echo "üè• Health check: http://$(hostname):$NGINX_PORT/health"
          echo "üìã Info endpoint: http://$(hostname):$NGINX_PORT/info"
        fi
