name: Deploy Demo Nginx App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod-blue
        - prod-green

env:
  DEPLOY_TIME: ${{ github.event.head_commit.timestamp || github.run_id }}
  GIT_COMMIT: ${{ github.sha }}

jobs:
  deploy:
    runs-on: [self-hosted, local, docker]
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'dev' || 'prod-blue') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Display deployment info
      run: |
        echo "Deploying to environment: ${{ matrix.environment }}"
        echo "Git commit: ${{ env.GIT_COMMIT }}"
        echo "Deploy time: ${{ env.DEPLOY_TIME }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Runner hostname: $(hostname)"
        
    - name: Cleanup existing deployment
      run: |
        echo "Cleaning up existing containers for ${{ matrix.environment }}..."
        docker compose -p demo-${{ matrix.environment }} down --remove-orphans || true
        docker system prune -f || true
        
    - name: Build and deploy
      run: |
        echo "Building and deploying to ${{ matrix.environment }}..."
        
        # Set environment variables for docker compose
        export ENVIRONMENT=${{ matrix.environment }}
        export DEPLOY_TIME="${{ env.DEPLOY_TIME }}"
        export GIT_COMMIT="${{ env.GIT_COMMIT }}"
        export APP_VERSION="${{ github.ref_name }}-${{ github.run_number }}"
        
        # Check if env file exists
        if [ ! -f ".env.${{ matrix.environment }}" ]; then
          echo "Environment file .env.${{ matrix.environment }} not found, using defaults"
          cp .env.example .env.${{ matrix.environment }}
        else
          echo "Using environment file: .env.${{ matrix.environment }}"
        fi
        
        # Determine compose files to use
        COMPOSE_FILES="-f docker-compose.yml"
        if [ -f "docker-compose.${{ matrix.environment }}.yml" ]; then
          COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.${{ matrix.environment }}.yml"
          echo "Using override file: docker-compose.${{ matrix.environment }}.yml"
        fi
        
        # Deploy with compose
        docker compose $COMPOSE_FILES -p demo-${{ matrix.environment }} up -d --build
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        
        # Wait for container to be ready
        echo "Waiting for container startup..."
        sleep 15
        
        # Get container info
        echo "=== Container Status ==="
        docker compose -p demo-${{ matrix.environment }} ps
        
        # Get the port from environment file
        NGINX_PORT=8080  # Default port
        if [ -f ".env.${{ matrix.environment }}" ]; then
          ENV_PORT=$(grep "^NGINX_PORT=" .env.${{ matrix.environment }} | cut -d'=' -f2 | tr -d ' "'"'" || echo "")
          if [ -n "$ENV_PORT" ]; then
            NGINX_PORT=$ENV_PORT
          fi
        fi
        
        echo "Using port: $NGINX_PORT"
        
        # Test health endpoint from inside the container first
        echo "=== Internal Health Check ==="
        if docker compose -p demo-${{ matrix.environment }} exec -T demo-nginx wget -q -O - http://localhost/health; then
          echo "‚úÖ Internal health check successful"
        else
          echo "‚ùå Internal health check failed"
          docker compose -p demo-${{ matrix.environment }} logs demo-nginx
          exit 1
        fi
        
        # Test health endpoint from host using Docker network
        echo "=== External Health Check ==="
        
        # Method 1: Try from host (this should work since you confirmed it works manually)
        if curl -f -m 10 --retry 3 --retry-delay 2 http://host.docker.internal:$NGINX_PORT/health 2>/dev/null; then
          echo "‚úÖ Health check successful via host.docker.internal"
          HEALTH_URL="http://host.docker.internal:$NGINX_PORT"
        # Method 2: Get container IP and test directly
        elif CONTAINER_IP=$(docker inspect $(docker compose -p demo-${{ matrix.environment }} ps -q demo-nginx) --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}') && \
             curl -f -m 10 http://$CONTAINER_IP/health; then
          echo "‚úÖ Health check successful via container IP: $CONTAINER_IP"
          HEALTH_URL="http://$CONTAINER_IP"
        # Method 3: Connect to the same network as the container
        elif docker run --rm --network demo-network-${{ matrix.environment }} curlimages/curl:latest curl -f -m 10 http://demo-nginx-${{ matrix.environment }}/health; then
          echo "‚úÖ Health check successful via container network"
          HEALTH_URL="http://demo-nginx-${{ matrix.environment }}"
        else
          echo "‚ùå All health check methods failed"
          echo "=== Debug Information ==="
          echo "Container logs:"
          docker compose -p demo-${{ matrix.environment }} logs demo-nginx
          echo "Container inspect:"
          docker inspect $(docker compose -p demo-${{ matrix.environment }} ps -q demo-nginx)
          echo "Network information:"
          docker network ls
          exit 1
        fi
        
        # Test info endpoint
        echo "=== Testing Info Endpoint ==="
        if docker compose -p demo-${{ matrix.environment }} exec -T demo-nginx wget -q -O - http://localhost/info; then
          echo "‚úÖ Info endpoint successful"
        else
          echo "‚ùå Info endpoint failed"
          exit 1
        fi
        
        echo "‚úÖ Deployment verification successful!"
        echo "üåê Application available at: http://$(hostname):$NGINX_PORT"
        echo "üè• Health check: $HEALTH_URL/health"
        echo "üìã Info endpoint: $HEALTH_URL/info"
        
    - name: Tag successful deployment
      if: success() && github.event_name == 'push'
      run: |
        echo "Tagging successful deployment..."
        
        # Create deployment tag
        DEPLOYMENT_TAG="deploy-${{ matrix.environment }}-$(date +%Y%m%d-%H%M%S)"
        
        # Log deployment details
        echo "Deployment Details:" >> deployment.log
        echo "Environment: ${{ matrix.environment }}" >> deployment.log
        echo "Commit: ${{ env.GIT_COMMIT }}" >> deployment.log
        echo "Time: ${{ env.DEPLOY_TIME }}" >> deployment.log
        echo "Tag: $DEPLOYMENT_TAG" >> deployment.log
        echo "Runner: $(hostname)" >> deployment.log
        echo "---" >> deployment.log
        
        echo "Deployment tagged as: $DEPLOYMENT_TAG"
        
    - name: Deployment summary
      if: always()
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "Environment: ${{ matrix.environment }}"
        echo "Status: ${{ job.status }}"
        echo "Commit: ${{ env.GIT_COMMIT }}"
        echo "Time: ${{ env.DEPLOY_TIME }}"
        echo "Runner: $(hostname)"
        
        if [ "${{ job.status }}" = "success" ]; then
          # Get port safely
          NGINX_PORT=8080  # Default
          if [ -f ".env.${{ matrix.environment }}" ]; then
            ENV_PORT=$(grep "^NGINX_PORT=" .env.${{ matrix.environment }} | cut -d'=' -f2 | tr -d ' "'"'" || echo "")
            if [ -n "$ENV_PORT" ]; then
              NGINX_PORT=$ENV_PORT
            fi
          fi
          
          echo "üåê Access your app: http://$(hostname):$NGINX_PORT"
          echo "üè• Health check: http://$(hostname):$NGINX_PORT/health"
          echo "üìã Info endpoint: http://$(hostname):$NGINX_PORT/info"
        fi
