name: Deploy Demo Nginx App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod-blue
        - prod-green

env:
  DEPLOY_TIME: ${{ github.event.head_commit.timestamp || github.run_id }}
  GIT_COMMIT: ${{ github.sha }}

jobs:
  deploy:
    runs-on: [self-hosted, local, docker]
    
    strategy:
      matrix:
        environment: 
          - ${{ github.event.inputs.environment || (github.event_name == 'pull_request' && 'dev' || 'prod-blue') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Display deployment info
      run: |
        echo "Deploying to environment: ${{ matrix.environment }}"
        echo "Git commit: ${{ env.GIT_COMMIT }}"
        echo "Deploy time: ${{ env.DEPLOY_TIME }}"
        echo "Triggered by: ${{ github.event_name }}"
        echo "Runner hostname: $(hostname)"
        
    - name: Cleanup existing deployment
      run: |
        echo "Cleaning up existing containers for ${{ matrix.environment }}..."
        docker compose -p demo-${{ matrix.environment }} down --remove-orphans || true
        docker system prune -f || true
        
    - name: Build and deploy
      run: |
        echo "Building and deploying to ${{ matrix.environment }}..."
        
        # Set environment variables for docker compose
        export ENVIRONMENT=${{ matrix.environment }}
        export DEPLOY_TIME="${{ env.DEPLOY_TIME }}"
        export GIT_COMMIT="${{ env.GIT_COMMIT }}"
        export APP_VERSION="${{ github.ref_name }}-${{ github.run_number }}"
        
        # Check if env file exists
        if [ ! -f ".env.${{ matrix.environment }}" ]; then
          echo "Environment file .env.${{ matrix.environment }} not found, using defaults"
          cp .env.example .env.${{ matrix.environment }}
        else
          echo "Using environment file: .env.${{ matrix.environment }}"
        fi
        
        # Determine compose files to use
        COMPOSE_FILES="-f docker-compose.yml"
        if [ -f "docker-compose.${{ matrix.environment }}.yml" ]; then
          COMPOSE_FILES="$COMPOSE_FILES -f docker-compose.${{ matrix.environment }}.yml"
          echo "Using override file: docker-compose.${{ matrix.environment }}.yml"
        fi
        
        # Deploy with compose
        docker compose $COMPOSE_FILES -p demo-${{ matrix.environment }} up -d --build
        
    - name: Wait for container
      run: |
        echo "Waiting for container to be ready..."
        sleep 15
        
    - name: Check container status
      run: |
        echo "=== Container Status ==="
        docker compose -p demo-${{ matrix.environment }} ps
        
    - name: Check container logs
      run: |
        echo "=== Container Logs ==="
        docker compose -p demo-${{ matrix.environment }} logs demo-nginx
        
    - name: Test from inside container
      run: |
        echo "=== Testing from inside container ==="
        docker compose -p demo-${{ matrix.environment }} exec -T demo-nginx wget -q -O - http://localhost/health || echo "Internal test failed"
        
    - name: Check port binding
      run: |
        echo "=== Port Status ==="
        netstat -tlnp | grep :8080 || echo "Port 8080 not found"
        
        echo "=== Docker Port Mapping ==="
        docker port $(docker compose -p demo-${{ matrix.environment }} ps -q demo-nginx) || echo "No port mapping found"
        
    - name: Simple curl test
      run: |
        echo "=== Simple Curl Test ==="
        curl -v http://localhost:8080/health || echo "Curl test failed"
        
    - name: Verify deployment
      run: |
        echo "Final verification..."
        
        # Get the port from environment file
        NGINX_PORT=8080  # Default port
        if [ -f ".env.${{ matrix.environment }}" ]; then
          ENV_PORT=$(grep "^NGINX_PORT=" .env.${{ matrix.environment }} | cut -d'=' -f2 | tr -d ' "'"'" || echo "")
          if [ -n "$ENV_PORT" ]; then
            NGINX_PORT=$ENV_PORT
          fi
        fi
        
        echo "Using port: $NGINX_PORT"
        
        # Simple health check with timeout
        if timeout 10 curl -f http://localhost:$NGINX_PORT/health; then
          echo "Health check successful!"
        else
          echo "Health check failed"
          exit 1
        fi
        
        # Test info endpoint
        if timeout 10 curl -f http://localhost:$NGINX_PORT/info; then
          echo "Info endpoint successful!"
        else
          echo "Info endpoint failed"
          exit 1
        fi
        
        echo "Deployment verification successful!"
        echo "Application available at: http://localhost:$NGINX_PORT"
        
    - name: Deployment summary
      if: always()
      run: |
        echo "Deployment Summary"
        echo "=================="
        echo "Environment: ${{ matrix.environment }}"
        echo "Status: ${{ job.status }}"
        echo "Commit: ${{ env.GIT_COMMIT }}"
        echo "Time: ${{ env.DEPLOY_TIME }}"
        echo "Runner: $(hostname)"
